<!DOCTYPE html>
<html lang="pt-br">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
<title>Gerador – Caixinha (Stories) • v2.3 (grid + padding fix)</title>
<style>
  :root{
    --bg:#0a0a0a; --fg:#fafafa; --panel:#121212;
    --ig-sticker-top:#2c2c2e;
    --ig-sticker-bottom:#ffffff;
    --ig-sticker-text:#ffffff;
    --ig-question-text:#2a2a2a;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0; font:16px/1.5 ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial;
    color:var(--fg); background:#0b0b0b;
    display:grid; grid-template-columns:minmax(380px,560px) 1fr; grid-template-areas:"controls preview";
    gap:16px; padding:16px; height:100vh;
  }
  @media (max-width: 900px){
    body{grid-template-columns:1fr; grid-template-rows:auto 1fr; grid-template-areas:"controls" "preview";
         gap:10px; padding:10px; height:100svh;}
  }

  .panel{background:var(--panel); border:1px solid #1f1f1f; border-radius:16px; padding:16px; box-shadow:0 10px 30px rgba(0,0,0,.35); overflow:auto}
  #controls{ grid-area:controls; }
  .preview-wrap{ grid-area:preview; background:#121212; border:1px solid #1f1f1f; border-radius:16px; padding:12px; box-shadow:0 10px 30px rgba(0,0,0,.35); overflow:auto; }
  .panel h2{margin:4px 0 12px; font-size:18px}

  .row{display:grid; grid-template-columns:1fr 1fr; gap:12px}
  .row-3{display:grid; grid-template-columns:1fr 1fr 1fr; gap:12px}
  @media (max-width: 900px){ .row, .row-3{grid-template-columns:1fr} }
  label{display:block; font-size:14px; color:#9a9a9a; margin:10px 0 8px}

  textarea, input[type=text], select{
    width:100%; background:#0f0f0f; border:1.2px solid #242424; color:#f0f0f0;
    padding:12px; border-radius:12px; outline:none; font-size:15px;
  }
  textarea#jsonl{ min-height:140px; resize:vertical }
  input[type=range]{width:100%}
  .btn{background:#f5f5f5; color:#111; border:none; padding:12px 14px; border-radius:12px; font-weight:800; cursor:pointer}
  .btn.secondary{background:#1c1c1c; color:#eaeaea; border:1px solid #2a2a2a}

  /* Preview grid (v2.3) */
  .preview-area{ display:grid; grid-auto-rows:1fr; gap:12px; align-content:start }
  @media (max-width: 900px){ .preview-area{ grid-template-columns:1fr !important } }
  canvas.thumb{ width:100%; height:auto; aspect-ratio:1080/1920; background:#000; border-radius:12px; box-shadow:0 6px 18px rgba(0,0,0,.45); cursor:pointer }

  /* Stage offscreen para rasterizar DOM real */
  #stage{ position:fixed; left:-99999px; top:0; width:1080px; height:1920px; overflow:hidden; }

  /* Story DOM (1080x1920) */
  .story{ width:1080px; height:1920px; background:#000; position:relative; display:flex; align-items:center; justify-content:center; }
  .group{ width:100%; padding:120px 0 140px; display:flex; flex-direction:column; align-items:center; justify-content:center; gap:36px; }

  /* Sticker */
  .sticker{ width:var(--sw,840px); border-radius:36px; box-shadow:0 10px 28px rgba(0,0,0,.45); overflow:hidden; background:#fff; }
  /* HEADER: mais padding interno */
  .st-head{
    min-height:120px; display:flex; align-items:center; justify-content:center;
    background:var(--ig-sticker-top); color:var(--ig-sticker-text);
    padding:28px 64px; /* antes: 0 32px */
  }
  .st-head .tema{
    font-weight:800; font-size:44px; line-height:1.1; text-align:center;
    white-space:normal; word-break:keep-all; overflow-wrap:normal; hyphens:none;
    text-wrap:balance;
  }
  /* BODY: mais respiro nas bordas */
  .st-body{
    background:var(--ig-sticker-bottom); color:var(--ig-question-text);
    padding:40px 72px; /* antes: 24px 56px */
    display:flex; align-items:center; justify-content:center;
  }
  .st-body .pergunta{
    margin:0; font-weight:700; font-size:44px; line-height:1.18; text-align:center;
    white-space:pre-wrap; word-break:keep-all; overflow-wrap:normal; hyphens:none;
    text-wrap:balance;
  }

  /* Resposta (fonte padrão SERIF como v2.3) */
  .answer{
    width:100%; padding:0 120px; color:#fff;
    font-size: var(--fs,44px); line-height: var(--lh,1.35);
    white-space:pre-wrap; word-break:keep-all; overflow-wrap:normal; hyphens:none;
    text-align: var(--ta, center);
    text-wrap:pretty;
    font-family: var(--ff, Georgia, 'Times New Roman', serif);
  }
</style>
</head>
<body>
  <!-- Controles -->
  <section id="controls" class="panel">
    <h2>Lote JSONL (grid + padding fix)</h2>
    <label for="jsonl">Cole o JSONL (1 objeto por linha)</label>
    <textarea id="jsonl" spellcheck="false" placeholder='{"tema":"Bate bola","pergunta":"Arrependimento","resposta":"Texto..."}'></textarea>
    <div style="display:flex; gap:8px; align-items:center; flex-wrap:wrap; margin-top:8px">
      <input id="file" type="file" accept=".jsonl,.json,.txt" />
      <button id="loadBtn" class="btn secondary">Carregar</button>
      <button id="renderBtn" class="btn">Renderizar</button>
      <button id="sampleBtn" class="btn secondary">Exemplo</button>
      <span id="count" style="font-size:12px; color:#bdbdbd">0 itens</span>
    </div>

    <div style="margin-top:12px">
      <label>Defaults (podem ser sobrescritos por linha)</label>
      <div class="row">
        <div>
          <label for="dAlign">Alinhamento</label>
          <select id="dAlign">
            <option value="center">Center</option>
            <option value="left">Left</option>
            <option value="right">Right</option>
          </select>
        </div>
        <div>
          <label for="dFont">Fonte da resposta</label>
          <select id="dFont">
            <option value="serif">Serif (modelo)</option>
            <option value="inter">Inter / System</option>
          </select>
        </div>
      </div>
      <div class="row-3">
        <div>
          <label for="dSticker">Largura da caixinha</label>
          <input id="dSticker" type="range" min="600" max="980" value="860" />
        </div>
        <div>
          <label for="dTxtSize">Tamanho do texto (resposta)</label>
          <input id="dTxtSize" type="range" min="28" max="64" value="44" />
        </div>
        <div>
          <label for="dLH">Altura de linha (resposta)</label>
          <input id="dLH" type="range" min="1.1" max="1.8" step="0.05" value="1.35" />
        </div>
      </div>
    </div>

    <div style="margin-top:12px">
      <button id="downloadAll" class="btn" style="width:100%">Baixar todos (PNG)</button>
    </div>
  </section>

  <!-- Preview -->
  <section class="preview-wrap">
    <div id="preview" class="preview-area"></div>
  </section>

  <!-- Stage offscreen (DOM real para rasterizar) -->
  <div id="stage"></div>

<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script>
(function(){
  const $ = (id)=>document.getElementById(id)
  const state = { items: [], canvases: [], doms: [], thumbs: [] }
  const W = 1080, H = 1920, ratio = H/W

  function slug(s){
    return (s||'').toLowerCase()
      .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'')
      .replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,40) || 'caixinha'
  }

  function stripCodeFence(text){
    if(!text) return ''
    const trimmed = text.trim()
    if(/^```/i.test(trimmed) && /```$/m.test(trimmed)){
      return trimmed.replace(/^```[a-zA-Z]*\\s*/,'').replace(/\\s*```$/,'').trim()
    }
    return text
  }

  function extractObjects(raw){
    let text = stripCodeFence(raw || '')
    text = text.replace(/^\\uFEFF/, '').replace(/\\r\\n?/g,'\\n')
    let objs = [], buf = '', depth = 0, inStr = false, esc = false, started=false
    for(let i=0;i<text.length;i++){
      let ch = text[i]
      if(inStr){
        buf += ch
        if(esc){ esc=false; continue }
        if(ch === '\\\\'){ esc=true; continue }
        if(ch === '"'){ inStr = false }
        continue
      }
      if(ch === '"'){ inStr = true; buf += ch; continue }
      if(ch === '`'){ continue }
      if(ch === '{'){ depth++; buf += ch; started=true; continue }
      if(ch === '}'){
        if(depth>0){ depth--; buf += ch }
        if(depth === 0 && started){
          const objStr = buf.trim(); if(objStr){ objs.push(objStr) }
          buf=''; started=false
        }
        continue
      }
      if(depth>0){ buf += ch }
    }
    return objs
  }
  function parseJSONStream(text){
    const chunks = extractObjects(text)
    const data=[]
    chunks.forEach((chunk)=>{
      try{ data.push(JSON.parse(chunk)) }catch(e){}
    })
    if(data.length===0){
      const lines = (text||'').split(/\\r?\\n/)
      for(let i=0;i<lines.length;i++){
        const raw = lines[i].trim()
        if(!raw || !raw.startsWith('{')) continue
        try{ data.push(JSON.parse(raw)) }catch(e){}
      }
    }
    return data
  }

  function clamp(n, min, max){ return Math.max(min, Math.min(max, n)) }

  function normalizeItem(obj, idx){
    const d = {
      align: $('dAlign').value || 'center',
      font: $('dFont').value || 'serif',
      stickerWidth: +$('dSticker').value || 860,
      txtSize: +$('dTxtSize').value || 44,
      lineHeight: +$('dLH').value || 1.35,
    }
    const tema = (obj.tema ?? 'Perguntas')+''
    const pergunta = (obj.pergunta ?? 'Sua pergunta aqui')+''
    const resposta = (obj.resposta ?? 'Sua resposta aqui')+''

    const align = ['center','left','right'].includes(obj.align) ? obj.align : d.align
    const font = (obj.font==='inter' || obj.font==='serif') ? obj.font : d.font
    const stickerWidth = clamp(+obj.stickerWidth || d.stickerWidth, 600, 980)
    const txtSize = clamp(+obj.txtSize || d.txtSize, 28, 64)
    const lineHeight = clamp(+obj.lineHeight || d.lineHeight, 1.1, 1.8)

    return { idx, tema, pergunta, resposta, align, font, stickerWidth, txtSize, lineHeight }
  }

  function buildStoryDOM(item){
    const el = document.createElement('div')
    el.className = 'story'
    const ff = item.font==='inter'
      ? "Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial"
      : "Georgia, 'Times New Roman', serif"
    el.style.fontFamily = ff
    const ffAnswer = (item.font==='inter')
      ? "Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial"
      : "Georgia, 'Times New Roman', serif"
    el.innerHTML = `
      <div class="group" style="--sw:${item.stickerWidth}px; --fs:${item.txtSize}px; --lh:${item.lineHeight}; --ta:${item.align}; --ff:${ffAnswer};">
        <div class="sticker">
          <div class="st-head"><div class="tema">${escapeHtml(item.tema)}</div></div>
          <div class="st-body"><p class="pergunta">${escapeHtml(item.pergunta)}</p></div>
        </div>
        <div class="answer" style="text-align:${item.align}">${escapeHtml(item.resposta)}</div>
      </div>
    `
    return el
  }

  function escapeHtml(s){
    return (s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":"&#39;"}[m]))
      .replace(/\\n/g, '<br/>')
  }

  async function domToCanvas(el){
    const canvas = await html2canvas(el, {
      backgroundColor: '#000000',
      width: 1080, height: 1920, windowWidth: 1080, windowHeight: 1920,
      scale: 1
    })
    return canvas
  }

  function layout(){
    const grid = $('preview')
    const w = grid.clientWidth - 10
    const gap = 12
    const n = state.canvases.length
    if(n===0) return
    const minCell = 220, maxCell = 520
    let cols = Math.min(n, Math.max(1, Math.floor((w + gap) / (minCell + gap))))
    function cwFor(c){ return Math.min(maxCell, Math.floor((w - gap*(c-1)) / c)) }
    let cw = cwFor(cols)
    while(cols < n){
      const next = cwFor(cols+1)
      if(next >= minCell){ cols += 1; cw = next } else break
    }
    grid.style.gridTemplateColumns = `repeat(${cols}, ${cw}px)`
    const ch = Math.floor(cw * (1920/1080))
    state.thumbs.forEach((t, i)=>{
      const ctx = t.getContext('2d')
      t.width = cw; t.height = ch
      ctx.clearRect(0,0,cw,ch)
      ctx.drawImage(state.canvases[i], 0,0, cw, ch)
    })
  }

  async function render(){
    const stage = $('stage'); stage.innerHTML=''
    const grid = $('preview'); grid.innerHTML=''
    state.doms = []; state.canvases = []; state.thumbs = []

    for(const it of state.items){
      const story = buildStoryDOM(it)
      stage.appendChild(story)
      state.doms.push(story)
      /* eslint-disable no-await-in-loop */
      const cv = await domToCanvas(story)
      state.canvases.push(cv)

      const t = document.createElement('canvas')
      t.className = 'thumb'; t.title = `Baixar caixinha ${it.idx+1}`
      t.addEventListener('click', ()=>{
        const a = document.createElement('a')
        const name = `caixinha-${String(it.idx+1).padStart(3,'0')}-${slug(it.tema)}.png`
        a.download = name; a.href = cv.toDataURL('image/png'); a.click()
      })
      grid.appendChild(t)
      state.thumbs.push(t)
    }
    layout()
  }

  function loadFromText(){
    const raw = $('jsonl').value
    const arr = parseJSONStream(raw)
    state.items = arr.map((obj, i)=> normalizeItem(obj, i))
    $('count').textContent = state.items.length + ' itens'
  }

  $('loadBtn').addEventListener('click', loadFromText)
  $('renderBtn').addEventListener('click', async ()=>{ loadFromText(); if(state.items.length) await render() })
  $('sampleBtn').addEventListener('click', ()=>{
    $('jsonl').value =
`{"tema":"Dúvidas de carreira","pergunta":"Como começar no marketing digital?","resposta":"Base: fundamentos, personas e proposta de valor. Escolha 1 canal para dominar (ex.: Instagram ou Google) e meça toda semana.","align":"center","font":"serif","stickerWidth":860,"txtSize":44,"lineHeight":1.35}`
  })
  $('file').addEventListener('change', (e)=>{
    const f = e.target.files[0]; if(!f) return
    const reader = new FileReader()
    reader.onload = ev => { $('jsonl').value = ev.target.result; }
    reader.readAsText(f, 'utf-8')
  })
  window.addEventListener('resize', layout)

  $('downloadAll').addEventListener('click', async ()=>{
    if(!state.canvases.length){ await (async ()=>{ loadFromText(); await render() })() }
    for(let i=0;i<state.canvases.length;i++){
      await new Promise(r=>setTimeout(r,120))
      const a = document.createElement('a')
      a.download = `caixinha-${String(i+1).padStart(3,'0')}-${slug(state.items[i].tema)}.png`
      a.href = state.canvases[i].toDataURL('image/png'); a.click()
    }
  })
})()
</script>
</body>
</html>
